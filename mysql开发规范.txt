1.命名规范
（1）库名，表名，字段名必须使用小写字母，并采用下划线分割
（2）库名，表名，字段名禁止超过32个字符
（3）库名，表明，字段名必须知名知意，与业务等相关 一律使用英文 不可中英混用
（4）库名，表明，字段名禁止使用mysql保留字
（5）临时库，表名必须以tmp为前缀，并以日期为后缀。
（6）备份库，表必须以bak为前缀，并以日期为后缀

2.基础规范
（1）使用innodb存储引擎
（2）表的字符集统一使用utf8,必要时可申请使用utf8mb4字符集
（3）所有表，数据字段必须要有中文注释
（4）尽可能少的使用存储过程，触发器，视图，event等
（5）禁止存储大文件或者大的图片
（6）禁止在线上做数据压力测试


3.库表设计
（1）单实例控制表数量在500以内
（2）单表列控制在30
（3）有主键，禁止使用外键
（4）将大字段，访问频率低的字段拆分到单独的表中存储，分离冷热数据


4.字段设计
（1）建议使用unsigned存储非负数值
（2）建议使用int unsigned存储ipv4
	用int存储ip地址占用4字节，char(15)则占用15字节。另外，计算机处理整数类型比字符串类型快。使用int unsigned而不是char(15)来存储ipv4地址，通过mysql函数inet_ntoa和inet_aton来进行转化
（3）尽量把字段定义为not null并依具体情况给定默认值
    解读：
	a）null的列使索引/索引统计/值比较都更加复杂，对MySQL来说更难优化，对表中的每一行，每个为null的列都需要额外的空间来标识
	b）null 这种类型MySQL内部需要进行特殊处理，增加数据库处理记录的复杂性；同等条件下，表中有较多空字段的时候，数据库的处理性能会降低很多
	c）null值需要更多的存储空，无论是表还是索引中每行中的null的列都需要额外的空间来标识
	d）对null 的处理时候，只能采用is null或is not null，而不能采用=、in、<、<>、!=、not in这些操作符号。如：where name!=’shenjian’，如果存在name为null值的记录，查询结果就不会包含name为null值的记录
（4）int类型固定占用4字节存储，例如int(4)仅代表现实字符床宽度为4位，不代表存储长度
（5）禁止使用text,blob类型
（6）使用整数存储货币
（7）区分使用tinyint,smallint,mediumint,int,bigint数据类型。
（8）使用varchar(20)存储手机号
（9）禁止使用ENUM，可使用TINYINT代替
（10）区分使用datetime和timestamp
（11）使用varbinary存储大小写敏感的变长字符串或二进制内容
（12）必须有自增主键
	innodb引擎表是基于B+树的索引组织表(IOT)
	每个表都需要有一个聚集索引，所有的行记录都存储在B+树的叶子节点，基于聚集索引的增删改查的效率相对是最高的，如果我们定义了主键，那么innodb会选择其作为狙击索引；如果没有显式的定义主键，那么会选择不包含null值的唯一索引列作为主键索引;如果也没有这样的唯一索引，则innodb会选择内置6字节长的rowid作为隐含的聚集索引，综上总结，如果innodb表的数据写入顺序能和B+树的叶子节点顺序一致的话，这时候效率最高，下面几种情况的存取效率最高：
	使用自增列(INT/BIGINT类型）做主键，这时候写入顺序是自增的，和B+树叶子节点的分裂顺序一致；
	该表不指定自增列作主键，同时也没有可以被选为主键的唯一索引，这时候innodb会选择内置的rowid作为主键，写入顺序和rowid增长顺序一致；除此以外，如果一个InnoDB表又没有显示主键，又有可以被选择为主键的唯一索引，但该唯一索引可能不是递增关系时(例如字符串、UUID、多字段联合唯一索引的情况)，该表的存取效率就会比较差
5.索引规法
（1）单表索引建议控制在5个以内
（2）单索引字段数不超过5个
	解读：字段超过5个时，实际已经起不到有效过滤数据的作用了
（4）索引名必须全部使用小写
（5）非唯一索引按照"idx_字段名称[_字段名称]"进行命名
（6）唯一索引按照"uniq_字段名称[_字段名称]"进行命名
（7）组合索引建议包含所有字段名，过长的字段名可以采用缩写形式
（8）禁止冗余索引
（9）禁止重复索引
（10)禁止使用外键
（11）联表查询时，join列的数据类型必须相同，并且要建立索引
（12）不在低基数列上建立索引，例如‘性别’
（13）选择区分度大的列建立索引。组合索引中，区分度大的字段放在最前
（14）对字符串使用前缀索引，前缀索引长度不超过8个字符
（15）禁止在更新十分频繁、区分度不高的属性上建立索引
	解读：
		a）更新会变更B+树，更新频繁的字段建立索引会大大降低数据库性能
		b）“性别”这种区分度不大的属性，建立索引是没有什么意义的，不能有效过滤数据，性能与全表扫描类似
（16）建立组合索引，必须把区分度高的字段放在前面
	解读：能够更加有效的过滤数据
6.sql设计
（1)使用prepared statement,可以提高性能并避免sql注入
（2）用in代替or,sql语句中in包含的值不应过多，应少于1000个
（3）禁止隐式转换。数值类型禁止加引号;字符串类型必须加引号
（4）避免使用join和子查询，推荐使用join代替子查询
（5）用union all代替union
（6）select 只获取必要的字段，禁止使用select *
	解读：减少网络带宽消耗
		能有效利用覆盖索引
		表结构变更对程序基本无影响
（7）sql中避免出现now(),rand(),sysdate(),current_user()等不确定结果的函数
（8）insert语句必须指定字段列表，禁止使用insert into table()
（9）禁止单条sql语句同时更新多个表
（10）程序应有捕获sql异常的处理机制，必要时通过rollback显式回滚
（11）重要sql必须被索引例如：update,delete的where条件列，order by,group by,distinct字段，多表join字段
（12）禁止使用%前导查询，例如：like "%abc"，无法利用到索引
（13）使用explain判断sql语句是否合理使用索引，尽量避免extra列出现：using File Sort,Using Temporary
（14）禁止使用order by rand()

7.行为规范
（1）线上表结构变更必须进行审核然后用pt-osc更改
（2）禁止有super权限的应用账号存在
（3）禁止DDL,DCL权限的应用程序账号存在
（4）批量导入，导出，批量更新时 应在执行过程中观察服务
（5）出现业务部门人员误操作导致数据丢失，需要恢复数据，必须第一时间通知，并提供准确时间点，误操作语句等重要信息
（6）对同一个表的多次alter操作必须合并为一次操作

http://www.ywnds.com/?p=7023
半同步复制具体特性：

    从库会在连接到主库时告诉主库，它是不是配置了半同步。
    如果半同步复制在主库端是开启了的，并且至少有一个半同步复制的从库节点，那么此时主库的事务线程在提交时会被阻塞并等待，结果有两种可能，要么至少一个从库节点通知它已经收到了所有这个事务的Binlog事件，要么一直等待直到超过配置的某一个时间点为止，而此时，半同步复制将自动关闭，转换为异步复制。
    从库节点只有在接收到某一个事务的所有Binlog，将其写入并Flush到Relay Log文件之后，才会通知对应主库上面的等待线程。
    如果在等待过程中，等待时间已经超过了配置的超时时间，没有任何一个从节点通知当前事务，那么此时主库会自动转换为异步复制，当至少一个半同步从节点赶上来时，主库便会自动转换为半同步方式的复制。
    半同步复制必须是在主库和从库两端都开启时才行，如果在主库上没打开，或者在主库上开启了而在从库上没有开启，主库都会使用异步方式复制

无损复制其实就是对semi sync增加了rpl_semi_sync_master_wait_point参数，来控制半同步模式下主库在返回给会话事务成功之前提交事务的方式。rpl_semi_sync_master_wait_point该参数有两个值：AFTER_COMMIT和AFTER_SYNC

第一个值：AFTER_COMMIT（5.6默认值）

master将每个事务写入binlog（sync_binlog=1），传递到slave刷新到磁盘(sync_relay=1)，同时主库提交事务。master等待slave反馈收到relay log，只有收到ACK后master才将commit OK结果反馈给客户端


第二个值：AFTER_SYNC（5.7默认值，但5.6中无此模式）

master将每个事务写入binlog , 传递到slave刷新到磁盘(relay log)。master等待slave反馈接收到relay log的ack之后，再提交事务并且返回commit OK结果给客户端。 即使主库crash，所有在主库上已经提交的事务都能保证已经同步到slave的relay log中。



    性能提升，控制主库接收slave写事务成功反馈数量

MySQL 5.7新增了rpl_semi_sync_master_wait_slave_count参数，可以用来控制主库接受多少个slave写事务成功反馈，给高可用架构切换提供了灵活性。如图所示，当count值为2时，master需等待两个slave的ack。


    性能提升, Binlog互斥锁改进

旧版本半同步复制在主提交binlog的写会话和dump thread读binlog的操作都会对binlog添加互斥锁，导致binlog文件的读写是串行化的，存在并发度的问题

MySQL 5.7对binlog lock进行了以下两方面优化:

1. 移除了dump thread对binlog的互斥锁。

2. 加入了安全边际保证binlog的读安全。


1.show plugins:查看模块

2.master:
	install plugin rpl_semi_sync_master soname 'semisync_master.so'; --安装 semisync_master.so插件
  slave:
	install plugin rpl_semi_sync_slave soname 'semisunc_slave.so'l --安装 semisync_slave.so插件
	install plugin rpl_semi_sync_master soname 'semisync_master.so';

3.修改参数
	set global rpl_semi_sync_master_enabled=1;
	set global rpl_semi_sync_master_timeout=1000;
	set global rpl_semi_sync_slave_enabled=1;
  也可以直接写到配置文件中[mysqld]
  master:
  [mysqld]
  rpl_semi_sync_master_enabled = 1
  rpl_semi_sync_master_timeout = 1000 # 1秒
  
  slave：
  [mysqld]
  rpl_semi_sync_slave_enabled = 1
  如果在配置文件中修改则需要重启
  
  查看修改的参数
  master:
	show global variables like '%rpl_semi%';
	+-------------------------------------------+------------+
	| Variable_name                             | Value      |
	+-------------------------------------------+------------+
	| rpl_semi_sync_master_enabled              | ON         |
	| rpl_semi_sync_master_timeout              | 1000       |
	| rpl_semi_sync_master_trace_level          | 32         |
	| rpl_semi_sync_master_wait_for_slave_count | 1          |
	| rpl_semi_sync_master_wait_no_slave        | ON         |
	| rpl_semi_sync_master_wait_point           | AFTER_SYNC |
	+-------------------------------------------+------------+
	6 rows in set (0.00 sec)
 
 slave:
	show global variables like '%rpl_semi%';
	+-------------------------------------------+------------+
	| Variable_name                             | Value      |
	+-------------------------------------------+------------+
	| rpl_semi_sync_master_enabled              | ON         |
	| rpl_semi_sync_master_timeout              | 1000       |
	| rpl_semi_sync_master_trace_level          | 32         |
	| rpl_semi_sync_master_wait_for_slave_count | 1          |
	| rpl_semi_sync_master_wait_no_slave        | ON         |
	| rpl_semi_sync_master_wait_point           | AFTER_SYNC |
	| rpl_semi_sync_slave_enabled               | ON         |
	| rpl_semi_sync_slave_trace_level           | 32         |
	+-------------------------------------------+------------+
	8 rows in set (0.00 sec)

如果原来是已经建好的复制结构很简单：
	stop slave io_thread;
	start slave io_thread;

如果不是那么就用change语句 做同步

怎么确认是同步还是半同步？
	show globalvariables like '%semi%';
	show global status like '%semi%';



master:
root@localhost [zw3306]>show global status like '%semi%';
+--------------------------------------------+-------+
| Variable_name                              | Value |
+--------------------------------------------+-------+
| Rpl_semi_sync_master_clients               | 1     | 有多少个Semi-sync的备库
| Rpl_semi_sync_master_net_avg_wait_time     | 0     | 事务提交后，等待备库响应的平均时间
| Rpl_semi_sync_master_net_wait_time         | 0     | 等待网络响应的总次数
| Rpl_semi_sync_master_net_waits             | 7     | 总的网络等待时间
| Rpl_semi_sync_master_no_times              | 0     | 一共有几次从Semi-sync跌回普通状态
| Rpl_semi_sync_master_no_tx                 | 0     | 库未及时响应的事务数,如果这个值很大就有问题
| Rpl_semi_sync_master_status                | ON    | 主库上Semi-sync是否正常开启
| Rpl_semi_sync_master_timefunc_failures     | 0     | 时间函数未正常工作的次数
| Rpl_semi_sync_master_tx_avg_wait_time      | 410   | 开启Semi-sync，事务返回需要等待的平均时间
| Rpl_semi_sync_master_tx_wait_time          | 2876  | 事务等待备库响应的总时间
| Rpl_semi_sync_master_tx_waits              | 7     | 事务等待备库响应的总次数
| Rpl_semi_sync_master_wait_pos_backtraverse | 0     | 改变当前等待最小二进制日志的次数
| Rpl_semi_sync_master_wait_sessions         | 0     | 当前有几个线程在等备库响应
| Rpl_semi_sync_master_yes_tx                | 7     | Semi-sync模式下，成功的事务数
+--------------------------------------------+-------+
15 rows in set (0.00 sec)